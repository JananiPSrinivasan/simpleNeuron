$date
	Wed Jul 23 19:45:54 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module adder_tb $end
$var wire 16 ! sum [15:0] $end
$var wire 1 " carry $end
$var reg 1 # clk $end
$var reg 1 $ expected_carry $end
$var reg 16 % expected_sum [15:0] $end
$var reg 16 & in1 [15:0] $end
$var reg 8 ' in2 [7:0] $end
$var reg 1 ( rst_n $end
$var integer 32 ) passed_tests [31:0] $end
$var integer 32 * total_tests [31:0] $end
$scope module dut $end
$var wire 1 # clk $end
$var wire 16 + in1 [15:0] $end
$var wire 8 , in2 [7:0] $end
$var wire 1 ( rst_n $end
$var wire 16 - sum [15:0] $end
$var wire 16 . sign_ext [15:0] $end
$var wire 1 " carry $end
$var reg 17 / temp [16:0] $end
$upscope $end
$scope task run_test $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
b0 &
bx %
x$
0#
0"
b0 !
$end
#5000
1#
#10000
0#
0$
b1111111 %
b11011 .
b11011 '
b11011 ,
b1100100 &
b1100100 +
1(
#15000
b1111111 !
b1111111 -
b1111111 /
1#
#16000
b11110 %
b1111111111101100 .
b11101100 '
b11101100 ,
b110010 &
b110010 +
b1 )
b1 *
#20000
0#
#25000
b11110 !
b11110 -
b11110 /
1#
#26000
1$
b1111111110111010 %
b110010 .
b110010 '
b110010 ,
b1111111110001000 &
b1111111110001000 +
b10 )
b10 *
#30000
0#
#35000
b1111111110111010 !
b1111111110111010 -
1"
b11111111110111010 /
1#
#36000
b1111111101111111 %
b1111111111111111 .
b11111111 '
b11111111 ,
b1111111110000000 &
b1111111110000000 +
b11 )
b11 *
#40000
0#
#45000
b1111111101111111 !
b1111111101111111 -
b11111111101111111 /
1#
#46000
0$
b1000000000000000 %
b1 .
b1 '
b1 ,
b111111111111111 &
b111111111111111 +
b100 )
b100 *
#50000
0#
#55000
b1000000000000000 !
b1000000000000000 -
0"
b1000000000000000 /
1#
#56000
b11010010100101 %
b1111111110000001 .
b10000001 '
b10000001 ,
b11010100100100 &
b11010100100100 +
b101 )
b101 *
#60000
0#
#65000
b11010010100101 !
b11010010100101 -
b11010010100101 /
1#
#66000
1$
b1101011001101100 %
b1100011 .
b1100011 '
b1100011 ,
b1101011000001001 &
b1101011000001001 +
b110 )
b110 *
#70000
0#
#75000
b1101011001101100 !
b1101011001101100 -
1"
b11101011001101100 /
1#
#76000
0$
b111101010011010 %
b1111111110001101 .
b10001101 '
b10001101 ,
b111101100001101 &
b111101100001101 +
b111 )
b111 *
#80000
0#
#85000
b111101010011010 !
b111101010011010 -
0"
b111101010011010 /
1#
#86000
1$
b1000010001110111 %
b10010 .
b10010 '
b10010 ,
b1000010001100101 &
b1000010001100101 +
b1000 )
b1000 *
#90000
0#
#95000
b1000010001110111 !
b1000010001110111 -
1"
b11000010001110111 /
1#
#96000
b1110001100001110 %
b1101 .
b1101 '
b1101 ,
b1110001100000001 &
b1110001100000001 +
b1001 )
b1001 *
#100000
0#
#105000
b1110001100001110 !
b1110001100001110 -
b11110001100001110 /
1#
#106000
b1111000110110011 %
b111101 .
b111101 '
b111101 ,
b1111000101110110 &
b1111000101110110 +
b1010 )
b1010 *
#110000
0#
#115000
b1111000110110011 !
b1111000110110011 -
b11111000110110011 /
1#
#116000
0$
b101011101111001 %
b1111111110001100 .
b10001100 '
b10001100 ,
b101011111101101 &
b101011111101101 +
b1011 )
b1011 *
#120000
0#
#125000
b101011101111001 !
b101011101111001 -
0"
b101011101111001 /
1#
#126000
1$
b1110100110111111 %
b1111111111000110 .
b11000110 '
b11000110 ,
b1110100111111001 &
b1110100111111001 +
b1100 )
b1100 *
#130000
0#
#135000
b1110100110111111 !
b1110100110111111 -
1"
b11110100110111111 /
1#
#136000
b1000010001101111 %
b1111111110101010 .
b10101010 '
b10101010 ,
b1000010011000101 &
b1000010011000101 +
b1101 )
b1101 *
#140000
0#
#145000
b1000010001101111 !
b1000010001101111 -
b11000010001101111 /
1#
#146000
b1111100001011100 %
b1110111 .
b1110111 '
b1110111 ,
b1111011111100101 &
b1111011111100101 +
b1110 )
b1110 *
#150000
0#
#155000
b1111100001011100 !
b1111100001011100 -
b11111100001011100 /
1#
#156000
b1111 )
b1111 *
